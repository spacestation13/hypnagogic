# NOTE:
# All Y values are "inverted" from what you may be used to.
# The origin is in the top left
# (0,0) -----------------> X
# |
# |
# |
# |
# |
# |
# V
# Y

# loads a "template" from the template folder. A template is another config that is used as a base
# Templates get "overwritten" on top of as they are loaded. Anything you define in the rest of the
# config will take priority over anything defined in the template
# EX: Template defines icon_size_x as 32, config defines it as 48. 48 will be used.
template = "example-template"
# Bitmask Slice mode rough explanation:
# "Bitmask Smoothing" is a style of smoothing icons where adjacent tiles are checked and use as
# bitflags to produce a number, which is then used as a key to pick which icon to display
# See this article if you're still confused:
# https://gamedevelopment.tutsplus.com/tutorials/how-to-use-tile-bitmasking-to-auto-tile-your-level-layouts--cms-25673
# Bitmask Slice generates icons to be used for this style of smoothing
# It does this via cutting "corners" out of the input icons, which are then used to assemble
# all possible states. Four (or five) types of corners are needed, and then it picks which corner
# to use based on the adjacency.
# If any fields are confusing, see visual_ex-bitmask for visual references of some values!
mode = "BitmaskSlice"

# Produces "rotated" icons as dmi directions on each icon_state
# Each "rotated" version will be the correct corresponding
produce_dirs = false
# Whether diagonal adjacency should be checked, primarily used with flat top icons
smooth_diagonally = false

# Size of the input icons. Represents what size each "block" will be before cutting
[icon_size]
x = 32
y = 32

# Output position of generated icons. Can be used to create icons that have a "padding" around
# them.
[output_icon_pos]
x = 0
y = 0

# Size of the output icons that will be used in the out DMI
# Most of the time this can be the same as icon_size, but you may want to change it for things like
# padding or cutting one icon into multiple outputs
[output_icon_size]
x = 32
y = 32

# Defines the "positions" of the corner sources or "blocks"
# Each "block" consists of one type of corner, see visual-ex-bitmask.png for visual reference.
# The "Position" is an offset starting from the left with each "increase" being an offset of
# icon_size_x.
# ex, for 32x32 icon_size, 0 is the first 32x32, 1 is the next to the right, 2 is the one after, etc.
[positions]
# Represents "outer" corners.
# Used on a corner if both sides are missing adjacency
# Something with no adjacency will solely consist of convex corners
convex = 0
# Represents "inner" corners
# Used on a corner if both sides have adjacency
# Something with all cardinals adjacent will solely consist of concave corners
concave = 1
# Represents "horizontal" corners
# Something with only the "west" and "east" cardinals filled would solely consist of horizontal corners
horizontal = 2
# Represents "vertical" corners
# Something with only the "north" and "south" cardinals filled would solely consist of vertical corners
vertical = 3
# Represents the "flat" top section of diagonal smoothed falls
# Something with *all* directions adjacent will solely consist of flat corners
# REQUIRED IF USING smooth_diagonally
flat = 4

# The "split point" of where to cut corners.
# Since you may want to have different sized corners for icon styles where the "top" is off center
# this allows you to reposition it.
# 16, 16 means the "split point" is dead center, with each corner being a 16x16 region.
[cut_pos]
x = 16
y = 16

# Prefabs are "predesigned" inputs.
# Instead of assembling an icon from corners, you can make a pre-made icon and designate where it
# is in the file. It will then be used for the junction in the place of an icon generated from
# the corners.
# The format of a prefab is junction - position
# The junction is the bitflag representation of a junction. You can see them in the generated
# output if you are unsure.
# The position is the same format as used by "positions" - icon_size_x sized offsets
# Common junctions:
# 0 - no connections
# 255 - all connections
# Optional Parameter
[prefabs]
180 = 5

# Animation is supported by the cutter, but I currently don't have any example sources in the
# correct format.
# To enable animation cutting, you first need the input file to have animations.
# The input format for animations is for each "block" to have its animation frames lined up in a
# column underneath.
# Optional Parameter
[animation]
# Delay is a list of numbers representing the delay between each frame (in tenths of a second).
# If you do not provide a delay for each frame (ie, two delays for 4 frames,) the delay values
# will cycle until the list is full. ie, 10,20 for 5 frames becomes 10,20,10,20,10 and so on.
delays = [10, 20]
# Rewind is a boolean that maps directly to byond, if it's true animations will play,
# then animate "backwards" to the start.
# Defaults to false
rewind = false

# Settings for generating a unique map icon for each icon_state
# This entire section is optional
[map_icon]
# The name of the icon_state the resulting generated icon will use
icon_state_name = "map_icon"
# Attempt to automatically derive colors from the input icon
# if true, base_color, text_color, and outer_border will be ignored
# Optional, defaults to false if omitted
automatic = false
# The base color to use for the icon
# Accepts any hex color
base_color = "#FFFFFF"
# Text to generate on the icon. Any spaces will result in a new line of characters.
# Characters are 3 px wide with 1 px spaces between them. This means around 8 characters can fit
# on a 32x32 icon.
# This field is optional, if omitted no text will be on the output icon
text = "DEF"
# The color of the text to generate.
# Accepts any hex color
# This field will do nothing if `text` is not defined
text_color = "#000000"
# What position to place the text on the icon in
# Valid positions are:
# "top_left", "top_right", "bottom_left", "bottom_right", "center"
text_position = "bottom_right"
# What alignment to use for the text
# Valid alignments are:
# "left", "center", "right"
text_alignment = "right"
# border settings
# Borders are always 1 px wide, with the outer border following the edge of the icon, and the inner
# border being 1 px inside from the edge.
# style: The style of border to generate, either "solid" or "dotted"
# color: The color of the border to generate, any hex color
# These fields are optional, and if omitted no border will be generated for the respective field
inner_border = { style = "", color = "#000000"}
outer_border = { style = "", color = "#000000"}
